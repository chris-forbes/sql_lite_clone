#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#define COLUMN_USERNAME_SIZE 32
#define COLUMN_EMAIL_SIZE 255

typedef struct {
	uint32_t id;
	char username [COLUMN_USERNAME_SIZE + 1];
	char email [COLUMN_EMAIL_SIZE + 1];
} Row;

typedef struct {
	char* buffer;
	size_t buffer_length;
	ssize_t input_length;
} InputBuffer;

typedef enum {	META_COMMAND_SUCCESS,	META_COMMAND_UNRECOGNIZED_COMMAND} MetaCommandResult;

typedef enum {	PREPARE_SUCCESS, PREPARE_UNRECOGNIZED_STATEMENT, PREPARE_SYNTAX_ERROR, PREPARE_STRING_TOO_LONG, PREPARE_NEGATIVE_ID} PrepareResult;

typedef enum {	STATEMENT_INSERT, STATEMENT_SELECT} StatementType;

typedef enum {EXEC_SUCCESS, EXEC_TABLE_FULL, EXEC_FAIL} ExecResult;

typedef struct {
	StatementType type;
	Row row_to_insert;
}Statement;

#define u32 uint32_t
#define TABLE_MAX_PAGES 100
#define sizeof_attr(Struct, Attrib) sizeof(((Struct*)0)->Attrib)

const u32 ID_SIZE = sizeof_attr(Row, id);
const u32 USERNAME_SIZE = sizeof_attr(Row, username);
const u32 EMAIL_SIZE = sizeof_attr(Row, email);
const u32 ID_OFFSET = 0;
const u32 USERNAME_OFFSET = ID_OFFSET + ID_SIZE;
const u32 EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;
const u32 ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE;

const u32 PAGE_SIZE = 4096;
const u32 ROWS_PER_PAGE = PAGE_SIZE / ROW_SIZE;
const u32 TABLE_MAX_ROWS = ROWS_PER_PAGE;

typedef struct {
	u32 num_rows;
	void* pages[TABLE_MAX_PAGES];
}Table;

void print_row(Row* row){
	printf("(%d, %s, %s)\n", row->id, row->username, row->email);
}

void serialize_row(Row* source, void* destination) {
	memcpy(destination + ID_OFFSET, &(source->id), ID_SIZE);
	memcpy(destination + USERNAME_OFFSET, &(source->username), USERNAME_SIZE);
	memcpy(destination + EMAIL_OFFSET, &(source->email), EMAIL_SIZE);
}

void deserialize_row(void *source, Row* destination) {
	memcpy(&(destination->id), source + ID_OFFSET, ID_SIZE);
	memcpy(&(destination->username), source + USERNAME_OFFSET, USERNAME_SIZE);
	memcpy(&(destination->email), source + EMAIL_OFFSET, EMAIL_SIZE);
}

void* row_slot(Table* table, u32 row_num) {
	u32 page_num = row_num / ROWS_PER_PAGE;
	void *page = table->pages[page_num];
	if(page == NULL) {
		//only ever allocate
		page = table->pages[page_num] = malloc(PAGE_SIZE);
	}
	u32 row_offset = row_num % ROWS_PER_PAGE;
	u32 byte_offset = row_offset * ROW_SIZE;
	return page + byte_offset;
}

Table* new_table() {
	Table* table = (Table*)malloc(sizeof(Table));
	table->num_rows = 0;
	for(u32 i = 0; i < TABLE_MAX_PAGES ; i++) {
		table->pages[i] = NULL;
	}
	return table;
}

void free_table(Table* table) {
	for(int i = 0; i < table->pages[i]; i++) {
		free(table->pages[i]);
	}
	free(table);
}

InputBuffer* new_input_buffer() {
	InputBuffer * input_buffer = malloc(sizeof(InputBuffer));
	input_buffer -> buffer = NULL;
	input_buffer -> buffer_length = 0;
	input_buffer -> input_length = 0;
	return input_buffer;
}

void print_prompt() {printf("db > ");}

void print_help() {
	printf("Meta Commands Menu\n");
	printf("===============================================\n");
	printf(".help\t\tShow this menu.\n");
	printf(".exit\t\tExit the app.\n");
	printf("Prepare Commands\n");
	printf("===============================================\n");
	printf("insert\t\tFormat: insert <number> <string> <string>\n");
	printf("select\t\tSelect everything from the table\n");
}

void read_input(InputBuffer* input_buffer) {
	ssize_t bytes_read =
		getline(&(input_buffer->buffer), &(input_buffer->buffer_length), stdin);


	if(bytes_read <= 0) {
		printf("Error reading input\n");
		exit(EXIT_FAILURE);
	}

	input_buffer->input_length = bytes_read - 1;
	input_buffer->buffer[bytes_read -1] = 0;
}

void close_input_buffer(InputBuffer* input_buffer) {
	free(input_buffer->buffer);
	free(input_buffer);
}

MetaCommandResult do_meta_command(InputBuffer* input_buffer, Table* table) {
	if(strcmp(input_buffer->buffer, ".exit") == 0) {
		close_input_buffer(input_buffer);
		free_table(table);
		exit(EXIT_SUCCESS);
	} else if(strcmp(input_buffer->buffer, ".help") == 0) {
		print_help();
		return META_COMMAND_SUCCESS;
	} else {
		return META_COMMAND_UNRECOGNIZED_COMMAND;
	}

}

PrepareResult prepare_insert(InputBuffer* input_buffer, Statement* statement){
  statement->type = STATEMENT_INSERT;
  char* keyword = strtok(input_buffer->buffer, " ");
  char* id_string = strtok(NULL, " ");
  char* username = strtok(NULL, " ");
  char* email = strtok(NULL, " ");

  if(id_string == NULL || username == NULL || email == NULL) {
    return PREPARE_SYNTAX_ERROR;
  }

  int id = atoi(id_string);
  if(id < 0){
    return PREPARE_NEGATIVE_ID;
  }
  if(strlen(username) > COLUMN_USERNAME_SIZE) {
    return PREPARE_STRING_TOO_LONG;
  }
  if(strlen(email) > COLUMN_EMAIL_SIZE) {
    return PREPARE_STRING_TOO_LONG;
  }
  statement->row_to_insert.id = id;
  strcpy(statement->row_to_insert.username, username);
  strcpy(statement->row_to_insert.email, email);

  return PREPARE_SUCCESS;
}

PrepareResult prepare_statement(InputBuffer* input_buffer, Statement* statement) {
	if (strncmp(input_buffer->buffer, "insert", 6) == 0) {
	  return  prepare_insert(input_buffer, statement);
	}
	if(strncmp(input_buffer->buffer, "select", 6) == 0) {
		statement->type = STATEMENT_SELECT;
		return PREPARE_SUCCESS;
	}
	return PREPARE_UNRECOGNIZED_STATEMENT;
}

ExecResult execute_insert(Statement* statement, Table* table) {
	if(table->num_rows >= TABLE_MAX_ROWS) {
		return EXEC_TABLE_FULL;
	}
	Row* row_to_insert = &(statement->row_to_insert);
	serialize_row(row_to_insert, row_slot(table, table->num_rows));
	table->num_rows += 1;
	return EXEC_SUCCESS;
}

ExecResult execute_select(Statement* statement, Table* table) {
	Row row;
	for(u32 i = 0; i < table->num_rows; i++) {
		deserialize_row(row_slot(table, i), &row);
		print_row(&row);
	}
	return EXEC_SUCCESS;
}


ExecResult exec_statement(Statement* statement, Table* table) {
	switch(statement->type){
		case (STATEMENT_INSERT):
			return execute_insert(statement, table);
		case (STATEMENT_SELECT):
			return execute_select(statement, table);
	}
}

int main(int argc, char* argv[]) {
	InputBuffer* input_buffer = new_input_buffer();
	Table* table = new_table();
	while (true) {
		print_prompt();
		read_input(input_buffer);

		if(input_buffer->buffer[0] == '.') {
			switch(do_meta_command(input_buffer, table)){
				case (META_COMMAND_SUCCESS):
					continue;
				case (META_COMMAND_UNRECOGNIZED_COMMAND):
					printf("Unrecognized command '%s'\n", input_buffer->buffer);
					continue;
			}
		}
		Statement statement;
		switch(prepare_statement(input_buffer, &statement)) {
		case (PREPARE_SUCCESS):
		  break;
		case (PREPARE_UNRECOGNIZED_STATEMENT):
		  printf("Unrecognized keyword at start of '%s'.\n", input_buffer->buffer);
		  continue;
		case(PREPARE_SYNTAX_ERROR):
		  printf("Syntax Error in insert. %s\n", input_buffer->buffer);
		  continue;
		case(PREPARE_STRING_TOO_LONG):
		  printf("Value too long for field\n");
		  continue;
		case(PREPARE_NEGATIVE_ID):
		  printf("ID must be positive.\n");
		  continue;
		}
		exec_statement(&statement, table);
		printf("Done..\n");
	}
}
